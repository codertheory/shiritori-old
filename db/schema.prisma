// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions", "selectRelationCount"]
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           String   @default("USER")

  tokens   Token[]
  sessions Session[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Game {
  id        String   @id @default(cuid())
  private   Boolean  @default(false)
  started   Boolean  @default(false)
  finished  Boolean  @default(false)
  timer     Int      @default(15)
  lastWord  String?
  winner    Player?  @relation("winner", fields: [winnerId], references: [id], onDelete: Cascade)
  winnerId  String?
  index     Int      @default(0)
  updatedAt DateTime @updatedAt
  players   Player[]
  words     Word[]
}

model Player {
  id       String  @id @default(cuid())
  name     String
  score    Int     @default(100)
  game     Game    @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId   String
  lastWord String?
  active   Boolean @default(false)
  winner   Game?   @relation("winner")
  words    Word[]
}

model Word {
  id       String @id @default(cuid())
  word     String
  points   Int
  game     Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId   String
  player   Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId String
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgresql

enum TokenType {
  RESET_PASSWORD
}
